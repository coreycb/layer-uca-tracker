#!/usr/bin/env python3
#
# Daemon for publishing Ubuntu Cloud Archive reports.
#

import httplib2
import logging
import os
import shutil
import subprocess
import sys

BASE_DIR = '/opt/ubuntu-reports/server/cloud-archive/version-tracker/'

def gather_versions(upstream, release):
    ga_versions = os.path.join(BASE_DIR, 'gather-versions.py')
    data_dir = os.path.join(BASE_DIR, 'data-dir')
    cmd = [ga_versions,
           '--output_dir={}'.format(data_dir),
           release,
          ]
    if upstream:
        cmd.append('--upstream')
    try:
        subprocess.check_call(cmd)
        return 0
    except subprocess.CalledProcessError:
        return -1

def generate_report(upstream, release):
    ca_versions = os.path.join(BASE_DIR, 'ca-versions.py')
    data_dir = os.path.join(BASE_DIR, 'data-dir')
    cmd = [ca_versions,
           '--json_dir={}'.format(data_dir),
           '--os_release={}'.format(release),
          ]
    if upstream:
        cmd.append('--upstream')
        fname = '{}_upstream_versions.html'.format(release)
    else:
        fname = '{}_versions.html'.format(release)
    html_file = os.path.join('/usr/share/nginx/www/', fname)
    cmd.append('--output={}'.format(html_file))
    try:
        subprocess.check_call(cmd)
        return 0
    except subprocess.CalledProcessError:
        return -1

def publish_swift():
    env = {}
    with open('/home/ubuntu/openrc', 'r') as f:
        for line in f.readlines():
            line = line.replace('export ', '')
            line = line.replace('"', '')
            line = line.rstrip()
            var = line.split('=')[0]
            val = line.split('=')[1]
            env[var] = val
    cmds = [['swift', 'upload', 'reports',
             '-c', '--object-name', 'cloud-archive', '/usr/share/nginx/www'],
            ['swift', 'post', '--read-acl',
             '.r:*,.rlistings', 'reports']]
    for cmd in cmds:
        try:
            subprocess.check_call(cmd, env=env)
        except subprocess.CalledProcessError as e:
            return -1
    return 0

def main():
    logging.basicConfig(filename='/var/log/uca-tracker/tracker.log',
                        format='%(asctime)s %(levelname)s %(message)s',
                        datefmt='%Y-%m-%d %H:%M',
                        level=logging.DEBUG)
    while True:
{% if base_releases %}
{% for release in base_releases %}
        logging.debug("Running base version-tracker for {{ release }}")
        if gather_versions(upstream=False, release='{{ release }}'):
            logging.debug("Failure gathering versions for {{ release }}")
        if generate_report(upstream=False, release='{{ release }}'):
            logging.debug("Failure generating report for {{ release }}")
        logging.debug("Published {{ release }}_versions.html")
{% endfor %}
{% endif %}

{% if upstream_releases %}
{% for release in upstream_releases %}
        logging.debug("Running upstream version-tracker for {{ release }}")
        if gather_versions(upstream=True, release='{{ release }}'):
            logging.debug("Failure gathering versions for {{ release }}")
        if generate_report(upstream=True, release='{{ release }}'):
            logging.debug("Failure generating report for {{ release }}")
        logging.debug("Published {{ release }}_upstream_versions.html")
{% endfor %}
{% endif %}

        if os.path.isfile('/home/ubuntu/openrc'):
            logging.debug("Publishing to swift")
            if publish_swift():
                logging.debug("Failure publishing to swift")

if __name__ == "__main__":
    main()
